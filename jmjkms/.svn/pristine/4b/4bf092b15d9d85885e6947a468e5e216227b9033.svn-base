package com.jmjk.action;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.apache.struts2.ServletActionContext;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Result;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.jmjk.action.base.BaseAction;
import com.jmjk.entity.TCommunityHospitalGroup;
import com.jmjk.entity.THealthFile;
import com.jmjk.entity.view.VOldStaff;
import com.jmjk.enums.Admin_IsHead;
import com.jmjk.iservice.IHealthManagerService;
import com.jmjk.pojo.HealthFileSingleCloud;
import com.jmjk.pojo.UrineCloud;
import com.jmjk.pojo.UrineCloud.Urine;
import com.jmjk.pojo.XKHealthMachineCloud;
import com.jmjk.pojo.XKHealthMachineCloud.XKHealthMachine;
import com.jmjk.service.HealthFileService;
import com.jmjk.service.UrineService;
import com.jmjk.utils.GetSessionPerson;
import com.jmjk.utils.Page;
import com.jmjk.utils.TypeConverter;
import com.jmjk.utils.WebXMLParameter;

@Component
@Scope("prototype")
@Action(value = "UrineAction", results = {
		@Result(name = "getList", location = "/jsp/healthManager/urine/main.jsp"), //尿常规列表页  
		@Result(name = "getListByCX", location = "/jsp/healthManager/urine/main.jsp"), //尿常规列表页 -查询 
		@Result(name = "showDetail", location = "/jsp/healthManager/urine/detail.jsp"),  //尿常规详情页
		@Result(name = "getListFromCloud", location = "/jsp/healthManager/healthAdvice/urine/main.jsp"),
		@Result(name = "getListByCXFromCloud", location = "/jsp/healthManager/healthAdvice/urine/main.jsp"),  
		@Result(name = "showDetailFromCloud", location = "/jsp/healthManager/healthAdvice/urine/detail.jsp"),  
		})
public class UrineAction extends BaseAction{

	@Autowired
	private UrineService urineService;
	@Autowired
	private HealthFileService healthFileService;
	@Autowired
	private IHealthManagerService healthManagerService;
	
	private String appKey = WebXMLParameter.getParamByappkey("appkey1");
	private static final long serialVersionUID = 1L;
	private int healthFileId;
	private THealthFile localHealthFile;
	private int cp = 1;
	private Date startTime;
	private Date endTime;
	private String start;
	private String end;
	private String strSFZH;//身份证号
	private String name;
	private Long id;
	private int state = 2;// 档案状态
	private String resultJson;
	private int currentPage = 1;
	private String pageHtml;
	private List<Urine> theItems;
	private UrineCloud urineCloud;
	private Urine urine;
	// 用于数据总数
	private int pagenumT = 0;
	private int pageSize;
	private HealthFileSingleCloud.HealthFile healthFile;
	
	public HealthFileSingleCloud.HealthFile getHealthFile() {
		return healthFile;
	}
	public void setHealthFile(HealthFileSingleCloud.HealthFile healthFile) {
		this.healthFile = healthFile;
	}
	public Urine getUrine() {
		return urine;
	}
	public void setUrine(Urine urine) {
		this.urine = urine;
	}
	public THealthFile getLocalHealthFile() {
		return localHealthFile;
	}
	public void setLocalHealthFile(THealthFile localHealthFile) {
		this.localHealthFile = localHealthFile;
	}
	public int getHealthFileId() {
		return healthFileId;
	}
	public void setHealthFileId(int healthFileId) {
		this.healthFileId = healthFileId;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public UrineService getUrineService() {
		return urineService;
	}
	public void setUrineService(UrineService urineService) {
		this.urineService = urineService;
	}
	public HealthFileService getHealthFileService() {
		return healthFileService;
	}
	public void setHealthFileService(HealthFileService healthFileService) {
		this.healthFileService = healthFileService;
	}
	public int getCp() {
		return cp;
	}
	public void setCp(int cp) {
		this.cp = cp;
	}
	public Date getStartTime() {
		return startTime;
	}
	public void setStartTime(Date startTime) {
		this.startTime = startTime;
	}
	public Date getEndTime() {
		return endTime;
	}
	public void setEndTime(Date endTime) {
		this.endTime = endTime;
	}
	public String getStart() {
		return start;
	}
	public void setStart(String start) {
		this.start = start;
	}
	public String getEnd() {
		return end;
	}
	public void setEnd(String end) {
		this.end = end;
	}
	
	public String getStrSFZH() {
		return strSFZH;
	}
	public void setStrSFZH(String strSFZH) {
		this.strSFZH = strSFZH;
	}
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public int getState() {
		return state;
	}
	public void setState(int state) {
		this.state = state;
	}
	public String getResultJson() {
		return resultJson;
	}
	public void setResultJson(String resultJson) {
		this.resultJson = resultJson;
	}
	public int getCurrentPage() {
		return currentPage;
	}
	public void setCurrentPage(int currentPage) {
		this.currentPage = currentPage;
	}
	public String getPageHtml() {
		return pageHtml;
	}
	public void setPageHtml(String pageHtml) {
		this.pageHtml = pageHtml;
	}
	public List<Urine> getTheItems() {
		return theItems;
	}
	public void setTheItems(List<Urine> theItems) {
		this.theItems = theItems;
	}
	public UrineCloud getUrineCloud() {
		return urineCloud;
	}
	public void setUrineCloud(UrineCloud urineCloud) {
		this.urineCloud = urineCloud;
	}
	public int getPagenumT() {
		return pagenumT;
	}
	public void setPagenumT(int pagenumT) {
		this.pagenumT = pagenumT;
	}
	public int getPageSize() {
		return pageSize;
	}
	public void setPageSize(int pageSize) {
		this.pageSize = pageSize;
	}
	
	public String getList() {
		// 分页
		Page<XKHealthMachineCloud> page = new Page<XKHealthMachineCloud>();
		page.setCurrentPage(cp);
		String resultJson = "";

		//默认显示一年内的记录
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Date d = new Date();
		end = sdf.format(d);
		// endTime += " 23:59:59";
		Calendar ca = Calendar.getInstance();
		ca.setTime(d);
		ca.add(Calendar.YEAR, -1);
		start = sdf.format(ca.getTime());
		startTime = TypeConverter.convertString2Date(start, "yyyy-MM-dd");
		endTime = TypeConverter.convertString2Date(end, "yyyy-MM-dd");
		localHealthFile = healthFileService.getHealthFileById(healthFileId);
		if(localHealthFile!=null){//本地老人
			if(!localHealthFile.getIdNum().equals("")){
				strSFZH = localHealthFile.getIdNum().trim();
			} else {
				strSFZH = "-1";
			}
			if(localHealthFile.getName()!=null){
				name= localHealthFile.getName();
			} else {
				name = "";
			}
		} else { //其他平台老人
//			strSFZH = "-1";
//			name="";
			
//			healthFileId=Math.abs(healthFileId);
			healthFile = healthManagerService.getHealthfileCloudById(Math.abs(healthFileId));  //其他平台老人
			healthFile.setId(healthFileId);
			
			strSFZH = healthFile.getIdNum();
			name = healthFile.getName();
			
		}
		resultJson = urineService.getList(strSFZH, start, end, page.getCurrentPage(),
				page.getPageSize());

		if (resultJson != "") {

			// 解析json
			UrineCloud urine = JSON.parseObject(resultJson, UrineCloud.class);
			// 获取数据失败直接返回页面
			if (urine.getCode() == 0) {
				// 解析json
				String jsonString = urine.getPage().getResult();
				theItems = (List<Urine>) JSONArray.parseArray(jsonString,
						Urine.class);

				pagenumT = urine.getPage().getTotal();
				// for (int i = 0; i < theItems.size(); i++) {
				//
				// }
			}

		}
		// //用于时间回显
		// start=TypeConverter.convertDate2String(startTime, "yyyy-MM-dd");
		// end=TypeConverter.convertDate2String(endTime, "yyyy-MM-dd");
		page.setTotalNum(pagenumT);
		page.setCurrentPage(cp);
		currentPage = page.getCurrentPage();
		this.pageHtml = page.getPage("UrineAction!getList.action?healthFileId="+healthFileId);
		if(localHealthFile==null&&healthFile!=null){
			return "getListFromCloud"; //返回 健康建议菜单下       本地老人数据页面
		}
		return "getList";
	}
	
	public String getListByCX(){
		// 分页
		Page<XKHealthMachine> page = new Page<XKHealthMachine>();
		page.setCurrentPage(cp);
		String resultJson = "";
		
		if (checkEmpty(startTime) || checkEmpty(endTime)) {
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			Date d = new Date();
			end = sdf.format(d);
			// endTime += " 23:59:59";
			Calendar ca = Calendar.getInstance();
			ca.setTime(d);
			ca.add(Calendar.YEAR, -1);
			start = sdf.format(ca.getTime());
			// startTime += " 00:00:00";
			//用于时间回显
			startTime = TypeConverter.convertString2Date(start, "yyyy-MM-dd");
			endTime = TypeConverter.convertString2Date(end, "yyyy-MM-dd");
		} else {
			start = TypeConverter.convertDate2String(startTime, "yyyy-MM-dd");
			end = TypeConverter.convertDate2String(endTime, "yyyy-MM-dd");
		}
		localHealthFile = healthFileService.getHealthFileById(healthFileId);
		if(localHealthFile!=null){//本地老人
			if(!localHealthFile.getIdNum().equals("")){
				strSFZH = localHealthFile.getIdNum().trim();
			} else {
				strSFZH = "-1";
			}
			if(localHealthFile.getName()!=null){
				name= localHealthFile.getName();
			} else {
				name = "";
			}
		} else { //其他平台老人
//			strSFZH = "-1";
//			name="";
			
//			healthFileId=Math.abs(healthFileId);
			healthFile = healthManagerService.getHealthfileCloudById(Math.abs(healthFileId));  //其他平台老人
			
			strSFZH = healthFile.getIdNum();
			name = healthFile.getName();
			
		}
		resultJson = urineService.getList(strSFZH, start, end, page.getCurrentPage(),
				page.getPageSize());
		if (resultJson != "") {

			// 解析json
			UrineCloud urine = JSON.parseObject(resultJson, UrineCloud.class);
			// 获取数据失败直接返回页面
			if (urine.getCode() == 0) {
				// 解析json
				String jsonString = urine.getPage().getResult();
				theItems = (List<Urine>) JSONArray.parseArray(jsonString,
						Urine.class);

				pagenumT = urine.getPage().getTotal();
				// for (int i = 0; i < theItems.size(); i++) {
				//
				// }
			}

		}
		// //用于时间回显
		// start=TypeConverter.convertDate2String(startTime, "yyyy-MM-dd");
		// end=TypeConverter.convertDate2String(endTime, "yyyy-MM-dd");
		page.setTotalNum(pagenumT);
		page.setCurrentPage(cp);
		currentPage = page.getCurrentPage();
		this.pageHtml = page.getPage("UrineAction!getListByCX.action?startTime="+start+"&endTime="+end+"&healthFileId="+healthFileId);
		if(localHealthFile==null&&healthFile!=null){
			return "getListByCXFromCloud"; //返回 健康建议菜单下       本地老人数据页面
		}
		return "getListByCX";
	}
	
	private boolean checkEmpty(String str) {
		if (str == null) {
			return true;
		} else {
			return str.length() > 0 ? false : true;
		}
	}
	
	private boolean checkEmpty(Date d) {
		return d == null ? true : false;
	}
	
	public String showDetail(){
		if (id != null) {
			urine = urineService.getDetail(id);
		}
		localHealthFile = healthFileService.getHealthFileById(healthFileId);
		if(localHealthFile!=null){//本地老人
			if(!localHealthFile.getIdNum().equals("")){
				strSFZH = localHealthFile.getIdNum().trim();
			} else {
				strSFZH = "-1";
			}
			if(localHealthFile.getName()!=null){
				name= localHealthFile.getName();
			} else {
				name = "";
			}
		} else { //其他平台老人
//			strSFZH = "-1";
//			name="";
			
			healthFileId=Math.abs(healthFileId);
			healthFile = healthManagerService.getHealthfileCloudById(healthFileId);  //其他平台老人
			
			strSFZH = healthFile.getIdNum();
			name = healthFile.getName();
			
		}
		if(localHealthFile==null&&healthFile!=null){
			return "showDetailFromCloud"; //返回 健康建议菜单下       本地老人数据页面
		}
		return "showDetail";
	}
}
